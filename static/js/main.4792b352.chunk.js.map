{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","estPayment","setEstPayment","homePrice","setHomePrice","downPayment","setDownPayment","handleHomePriceChange","event","target","value","handleDownPaymentChange","useEffect","calculateMonthlyPayment","eval","className","additionalClasses","element","variant","isPageTitle","label","textIcon","name","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s4BAWA,SAASA,MAAO,IAAD,UAEuBC,oDAAS,GAFhC,wLAENC,WAFM,cAEMC,cAFN,yBAGqBF,oDAAS,KAH9B,yLAGNG,UAHM,cAGKC,aAHL,yBAIyBJ,oDAAS,KAJlC,yLAINK,YAJM,cAIOC,eAJP,cAMPC,sBAAwB,SAAAC,GAC5BJ,aAAaI,EAAMC,OAAOC,QAGtBC,wBAA0B,SAAAH,GAC9BF,eAAeE,EAAMC,OAAOC,QAG9BE,sDAAU,WACRC,6BAGF,IAAMA,wBAA0B,SAA1BA,0BACJX,cAAcY,KAAKX,WAAaW,KAAKT,eAGvC,OACE,kEAAKU,UAAU,OACb,2DAAC,+EAAD,CAAoBC,kBAAkB,cACpC,2DAAC,wEAAD,CACEC,QAAQ,KACRC,QAAQ,aACRC,aAAW,GAHb,mBAOA,2DAAC,wEAAD,CACEF,QAAQ,KACRC,QAAQ,cACRF,kBAAkB,uCAHpB,oDAQA,2DAAC,qEAAD,CAAUA,kBAAkB,iCAA5B,yCAIA,2DAAC,0EAAD,CAAeI,MAAM,aAAaC,UAAQ,EAACC,KAAK,WAAWZ,MAAOP,UAAWoB,SAAUhB,wBACvF,2DAAC,0EAAD,CAAea,MAAM,eAAeC,UAAQ,EAACC,KAAK,WAAWZ,MAAOL,YAAakB,SAAUZ,0BAE3F,2DAAC,wEAAD,CACEM,QAAQ,KACRD,kBAAkB,0BAFpB,8BAI8Bf,cAOvBF,2B,iKCzDKyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAChC,EAAA,EAAD,OAEFiC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4792b352.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport {\n  SprkHeading,\n  SprkText,\n  SprkTextInput,\n  SprkCenteredColumn,\n  SprkStack,\n  SprkStackItem,\n} from '@sparkdesignsystem/spark-react';\n\nfunction App() {\n\n  const [estPayment, setEstPayment] = useState(0);\n  const [homePrice, setHomePrice] = useState(300000);\n  const [downPayment, setDownPayment] = useState(60000);\n\n  const handleHomePriceChange = event => {\n    setHomePrice(event.target.value);\n  }\n\n  const handleDownPaymentChange = event => {\n    setDownPayment(event.target.value);\n  }\n\n  useEffect(() => {\n    calculateMonthlyPayment();\n  });\n\n  const calculateMonthlyPayment = () => {\n    setEstPayment(eval(homePrice) + eval(downPayment));\n  }\n\n  return (\n    <div className=\"App\">\n      <SprkCenteredColumn additionalClasses=\"sprk-u-pal\">\n        <SprkHeading\n          element=\"h1\"\n          variant=\"displayTwo\"\n          isPageTitle\n        >\n          Calc Ya' Later!\n        </SprkHeading>\n        <SprkHeading\n          element=\"h2\"\n          variant=\"displayFive\"\n          additionalClasses=\"sprk-u-FontStyle--italic sprk-u-mvm\"\n        >\n          An accessible and respectful mortgage calculator\n        </SprkHeading>\n\n        <SprkText additionalClasses=\"sprk-b-TypeBodyTwo sprk-u-mvl\">\n          Enter some info and get some numbers.\n        </SprkText>\n\n        <SprkTextInput label=\"Home Price\" textIcon name=\"monetary\" value={homePrice} onChange={handleHomePriceChange} />\n        <SprkTextInput label=\"Down Payment\" textIcon name=\"monetary\" value={downPayment} onChange={handleDownPaymentChange} />\n\n        <SprkHeading\n          element=\"h3\"\n          additionalClasses=\"sprk-b-TypeDisplayFive\"\n        >\n          Estimated Monthly Payment: {estPayment}\n        </SprkHeading>\n      </SprkCenteredColumn>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}