{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","estPayment","setEstPayment","homePrice","setHomePrice","downPayment","setDownPayment","insurance","setInsurance","tax","setTax","hoaFees","setHoaFees","useEffect","calculateMonthlyPayment","principal","D","Math","pow","className","additionalClasses","element","variant","isPageTitle","label","textIcon","name","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAuFeA,MA5Ef,WAAgB,IAAD,EAEuBC,mBAAS,GAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGqBF,mBAAS,MAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIyBJ,mBAAS,KAJlC,mBAINK,EAJM,KAIOC,EAJP,OAKqBN,mBAAS,IAL9B,mBAKNO,EALM,KAKKC,EALL,OAMSR,mBAAS,KANlB,mBAMNS,EANM,KAMDC,EANC,OAOiBV,mBAAS,GAP1B,mBAONW,EAPM,KAOGC,EAPH,KAiBbC,qBAAU,WACRC,OAGF,IAAMA,EAA0B,WAG9B,IAAMC,EAAYZ,EAAYE,EAIxBW,GAAIC,KAAKC,IAAK,EAHA,MAAM,GACN,KAEiC,IAHjC,MAAM,GAG+CD,KAAKC,IAAK,EAH/D,MAAM,GACN,MAQpBhB,EAJca,EAAYC,EAEOT,EAAYE,EAAME,IAKrD,OACE,yBAAKQ,UAAU,OACb,kBAAC,qBAAD,CAAoBC,kBAAkB,cACpC,kBAAC,cAAD,CACEC,QAAQ,KACRC,QAAQ,aACRC,aAAW,GAHb,mBAOA,kBAAC,cAAD,CACEF,QAAQ,KACRC,QAAQ,cACRF,kBAAkB,uCAHpB,oDAQA,kBAAC,WAAD,CAAUA,kBAAkB,iCAA5B,yCAIA,kBAAC,gBAAD,CAAeI,MAAM,aAAaC,UAAQ,EAACC,KAAK,WAAWC,MAAOxB,EAAWyB,SAAU,SAACC,GAAYzB,EAAayB,EAAMC,OAAOH,UAC9H,kBAAC,gBAAD,CAAeH,MAAM,eAAeC,UAAQ,EAACC,KAAK,WAAWC,MAAOtB,EAAauB,SAAU,SAACC,GAAYvB,EAAeuB,EAAMC,OAAOH,UACpI,kBAAC,gBAAD,CAAeH,MAAM,wBAAwBC,UAAQ,EAACC,KAAK,WAAWC,MAAOpB,EAAWqB,SAAU,SAACC,GAAYrB,EAAaqB,EAAMC,OAAOH,UACzI,kBAAC,gBAAD,CAAeH,MAAM,eAAeC,UAAQ,EAACC,KAAK,WAAWC,MAAOlB,EAAKmB,SAAU,SAACC,GAAYnB,EAAOmB,EAAMC,OAAOH,UACpH,kBAAC,gBAAD,CAAeH,MAAM,WAAWC,UAAQ,EAACC,KAAK,WAAWC,MAAOhB,EAASiB,SAAU,SAACC,GAAYjB,EAAWiB,EAAMC,OAAOH,UAExH,kBAAC,cAAD,CACEN,QAAQ,KACRD,kBAAkB,0BAFpB,8BAI8BnB,MCpElB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b152bdb0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport {\n  SprkHeading,\n  SprkText,\n  SprkTextInput,\n  SprkCenteredColumn,\n  SprkStack,\n  SprkStackItem,\n} from '@sparkdesignsystem/spark-react';\n\nfunction App() {\n\n  const [estPayment, setEstPayment] = useState(0);\n  const [homePrice, setHomePrice] = useState(350000);\n  const [downPayment, setDownPayment] = useState(70000);\n  const [insurance, setInsurance] = useState(89);\n  const [tax, setTax] = useState(499);\n  const [hoaFees, setHoaFees] = useState(0);\n\n  const handleHomePriceChange = event => {\n    setHomePrice(event.target.value);\n  }\n\n  const handleDownPaymentChange = event => {\n    setDownPayment(event.target.value);\n  }\n\n  useEffect(() => {\n    calculateMonthlyPayment();\n  });\n\n  const calculateMonthlyPayment = () => {\n    // D = (((1 + r)^n) - 1) / (r * (1 + r)^n)\n\n    const principal = homePrice - downPayment;\n    const monthlyRate = .0314/12;\n    const numPayments = 360;\n\n    const D =(Math.pow((1 + monthlyRate), numPayments) - 1) / (monthlyRate * Math.pow((1 + monthlyRate), numPayments))\n\n    const PandI = principal / D;\n\n    const estimatedPayment = PandI + insurance + tax + hoaFees;\n\n    setEstPayment(estimatedPayment);\n  }\n\n  return (\n    <div className=\"App\">\n      <SprkCenteredColumn additionalClasses=\"sprk-u-pal\">\n        <SprkHeading\n          element=\"h1\"\n          variant=\"displayTwo\"\n          isPageTitle\n        >\n          Calc Ya' Later!\n        </SprkHeading>\n        <SprkHeading\n          element=\"h2\"\n          variant=\"displayFive\"\n          additionalClasses=\"sprk-u-FontStyle--italic sprk-u-mvm\"\n        >\n          An accessible and respectful mortgage calculator\n        </SprkHeading>\n\n        <SprkText additionalClasses=\"sprk-b-TypeBodyTwo sprk-u-mvl\">\n          Enter some info and get some numbers.\n        </SprkText>\n\n        <SprkTextInput label=\"Home Price\" textIcon name=\"monetary\" value={homePrice} onChange={(event) => { setHomePrice(event.target.value)}} />\n        <SprkTextInput label=\"Down Payment\" textIcon name=\"monetary\" value={downPayment} onChange={(event) => { setDownPayment(event.target.value)}} />\n        <SprkTextInput label=\"Homeowner's Insurance\" textIcon name=\"monetary\" value={insurance} onChange={(event) => { setInsurance(event.target.value)}} />\n        <SprkTextInput label=\"Property Tax\" textIcon name=\"monetary\" value={tax} onChange={(event) => { setTax(event.target.value)}} />\n        <SprkTextInput label=\"HOA Fees\" textIcon name=\"monetary\" value={hoaFees} onChange={(event) => { setHoaFees(event.target.value)}} />\n\n        <SprkHeading\n          element=\"h3\"\n          additionalClasses=\"sprk-b-TypeDisplayFive\"\n        >\n          Estimated Monthly Payment: {estPayment}\n        </SprkHeading>\n      </SprkCenteredColumn>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}